// Generated by LiveScript 1.2.0
(function(){
  describe('patternLexer', function(){
    describe('getParamIds()', function(){
      return specify('should return an Array with the ids', function(){
        var ids;
        ids = crossroads.patternLexer.getParamIds('/lorem/{ipsum}/{dolor}');
        expect(ids[0]).toEqual('ipsum');
        return expect(ids[1]).toEqual('dolor');
      });
    });
    describe('compilePattern )', function(){
      specify('should create RegExp from string which should match pattern', function(){
        var pattern, regex;
        pattern = '/lorem/{ipsum}/{dolor}';
        regex = crossroads.patternLexer.compilePattern(pattern);
        return expect(regex.test(pattern)).toEqual(true);
      });
      specify('should work with special chars', function(){
        var pattern, regex;
        pattern = '/lo[rem](ipsum)/{ipsum}/{dolor}';
        regex = crossroads.patternLexer.compilePattern(pattern);
        return expect(regex.test(pattern)).toEqual(true);
      });
      specify('should work with optional params', function(){
        var pattern, regex;
        pattern = '/lo[rem](ipsum)/{ipsum}/{dolor}:foo::bar:/:blah:/maecennas';
        regex = crossroads.patternLexer.compilePattern(pattern);
        return expect(regex.test(pattern)).toEqual(true);
      });
      return specify('should support rest params', function(){
        var pattern, regex;
        pattern = '/lo[rem](ipsum)/{ipsum*}/{dolor}:foo::bar*:/:blah:/maecennas';
        regex = crossroads.patternLexer.compilePattern(pattern);
        return expect(regex.test(pattern)).toEqual(true);
      });
    });
    return describe('getParamValues()', function(){
      return specify('should return pattern params', function(){
        var pattern, regex, params;
        pattern = '/lorem/{ipsum}/{dolor}';
        regex = crossroads.patternLexer.compilePattern(pattern);
        params = crossroads.patternLexer.getParamValues('/lorem/foo/bar', regex);
        expect(params[0]).toEqual('foo');
        return expect(params[1]).toEqual('bar');
      });
    });
  });
}).call(this);
